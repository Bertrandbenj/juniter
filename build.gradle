buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url 'http://repo.spring.io/plugins-release' }
        jcenter()
    }
    dependencies {
        //classpath("org.springframework.boot:spring-boot-gradle-plugin:2.0.2.RELEASE")
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.0.2.RELEASE")
       // classpath("io.spring.gradle:dependency-management-plugin:0.6.1.RELEASE")

        //classpath 'me.champeau.gradle:antlr4-gradle-plugin:0.1'
        classpath 'org.hidetake:gradle-ssh-plugin:2.9.0'
        classpath 'org.openjfx:javafx-plugin:0.0.7'
    }

}

//apply plugin: 'eclipse'
//apply plugin: 'idea'
apply plugin: 'org.hidetake.ssh'
//apply plugin: 'org.springframework.boot'

allprojects {
    group 'org.duniter'
    version '1.0.0-SNAPSHOT'

   // maven { url 'https://jitpack.io' }

//    task hello << { task -> println "I'm project $task.project.name" }
}

subprojects {
    //apply plugin: "java"
    //apply plugin: 'application'
    //apply plugin: 'org.springframework.boot'
    //apply plugin: 'io.spring.dependency-management'

    tasks.withType(JavaCompile) {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    repositories {
        mavenCentral()
        mavenLocal()
        jcenter()
        maven { url 'https://jitpack.io' }

    }
    
    
}




//task buildAll {
//    dependsOn gradle.includedBuilds*.task(':buildAll')
//}



//https://gradle-ssh-plugin.github.io/docs/
remotes {
    juniter {
        role 'masterNode'
        host = 'juniter.bnimajneb.online'
        user = 'ben'
        agent = true 	// If this is set, Putty Agent or ssh-agent will be used on authentication
        identity = file("${System.getProperty('user.home')}/.ssh/id_rsa")
    }
}

//task deploy(dependsOn: ':core:bootJar') << {
//    ssh.run {
//        session(remotes.juniter) {
//            //execute 'killall java'
//
//            put from: 'build/libs/juniter-0.1.0.jar', into: '/home/ben'
//
//            //execute 'sudo service tomcat restart'
//            execute 'java -jar juniter-0.1.0.jar -Djuniter.useJavaFX=false --headless '
//        }
//    }
//}

task checkServer {
    doLast {
        ssh.run {
            session(remotes.juniter) {

                def result = execute 'ls -al' // Execute a command for fun

                // Any Gradle methods or properties are available in a session closure "$buildDir/tmp"
                copy {
                    from "docs/"
                    into "/tmp"
                }

                // Also Groovy methods or properties are available in a session closure
                println result
            }
        }
    }
}

