buildscript {
    repositories {
       mavenCentral()
       mavenLocal()
  	   maven { url "https://plugins.gradle.org/m2/" }
       maven { url 'http://repo.spring.io/plugins-release' }
       jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.0.2.RELEASE")
    	//classpath 'me.champeau.gradle:antlr4-gradle-plugin:0.1'
    	classpath 'org.hidetake:gradle-ssh-plugin:2.9.0'
        //classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.2.51"
    }
   
}

plugins {
	id 'org.springframework.boot' version '2.0.2.RELEASE'
    //id 'org.jetbrains.kotlin.jvm' version '1.2.51'
}

group 'org.duniter'
version '1.0.0-SNAPSHOT'


//antlr4.output = '$buildDir/generated-src/juniter/grammar/antlr4'
apply plugin: 'org.hidetake.ssh'
//apply plugin: 'scala'
//apply plugin: 'kotlin'
apply plugin: 'java'

apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'antlr'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'


//https://gradle-ssh-plugin.github.io/docs/
remotes {
	juniter {
		role 'masterNode'
		host = 'juniter.bnimajneb.online'
		user = 'ben'
		agent = true 	// If this is set, Putty Agent or ssh-agent will be used on authentication
        identity = file("${System.getProperty('user.home')}/.ssh/id_rsa")
	}

}

task deploy(dependsOn: bootJar) << {
  ssh.run {
    session(remotes.juniter) {
      //execute 'killall java'

      put from: 'build/libs/juniter-0.1.0.jar', into: '/home/ben'

      //execute 'sudo service tomcat restart'
      execute 'java -jar juniter-0.1.0.jar -Djuniter.useJavaFX=false --headless '
    }
  }
}

task checkServer {
  doLast {
    ssh.run {
      session(remotes.juniter) {
        
        def result = execute 'ls -al' // Execute a command for fun 

        // Any Gradle methods or properties are available in a session closure "$buildDir/tmp"
        copy {
          from "docs/"
          into "/tmp"
        }

        // Also Groovy methods or properties are available in a session closure
        println result
      }
    }
  }
}


javadoc {
    source = sourceSets.main.allJava
    classpath = configurations.compile
    destinationDir = new File("docs/javadoc") // inside of build 
}

bootJar {
    baseName = 'juniter'
    version =  '0.1.0'
}

springBoot {
	mainClassName = 'juniter.Application' 
}

bootRun {
	enableAssertions = true // !!  BR_G[0-108] assertion
	//jvmArgs = ["-agentlib:jdwp=transport=dt_socket,server=y,address=5005,suspend=y"]
}

repositories {
	mavenCentral()
	mavenLocal()
	jcenter()

}

configurations {
    all*.exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
    all*.exclude group: "ch.qos.logback"
    all*.exclude group: "org.slf4j", module: "log4j-over-slf4j" // allow using log4j 2.x
    all*.exclude group: "org.slf4j", module: "slf4j-simple"     // log4j is the configured backend
}



configurations {
    provided

    // add antlr4 to classpath
    //compileJava.dependsOn generateGrammarSource
    //compileJava.dependsOn compileScala
    //compileScala.dependsOn.remove("compileJava")
    compile.extendsFrom = extendsFrom.findAll { it != configurations.antlr }
    //compile.extendsFrom antlr4


}




sourceCompatibility = 10
targetCompatibility = 10


dependencies {
    compile("org.springframework.boot:spring-boot-starter-web") {
        exclude module: "spring-boot-starter-tomcat"
        exclude module: "spring-boot-starter-logging"
        exclude module: "logback-classic"
    }
    compile("org.springframework.boot:spring-boot-starter-actuator") {
        exclude module: "logback-classic"
    }

    //compile("org.springframework.boot:spring-boot-starter-web")	
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("org.springframework.boot:spring-boot-configuration-processor")
    compile("org.springframework.boot:spring-boot-starter-freemarker")
    compile("org.springframework.boot:spring-boot-starter-websocket")

    compile group: 'com.graphql-java', name: 'graphql-spring-boot-starter', version: '5.0.2'
    compile group: 'com.graphql-java', name: 'graphql-java', version: '8.0'
    compile group: 'com.graphql-java', name: 'graphql-spring-boot-autoconfigure', version: '5.0.2'
    compile group: 'com.graphql-java', name: 'graphql-java-servlet', version: '6.1.3'
    compile("com.graphql-java:graphiql-spring-boot-starter:3.6.0")
    compile("io.leangen.graphql:spqr:0.9.7")

    //compile 'com.graphql-java-kickstart:graphql-spring-boot-starter:5.3.1'

    // to embed GraphiQL tool
    //compile 'com.graphql-java-kickstart:graphiql-spring-boot-starter:5.3.1'

    // to embed Voyager tool
    //compile 'com.graphql-java-kickstart:voyager-spring-boot-starter:5.3.1'

    // testing facilities
    //testCompile 'com.graphql-java-kickstart:graphql-spring-boot-starter-test:5.3.1'


    compile "org.java-websocket:Java-WebSocket:1.3.9"
    
    compile("org.springframework:spring-web")
    compile("org.springframework:spring-webmvc")
    compile("org.springframework:spring-context-support")
    
    // Server stuff 
    compile("org.apache.httpcomponents:httpcore")
    provided "javax.servlet:javax.servlet-api"
    compile("commons-codec:commons-codec")
    compile("org.antlr:antlr4-runtime:4.7.1")
    compile("org.apache.logging.log4j:log4j-core")
    compile("org.postgresql:postgresql")
    compile("io.reactivex.rxjava2:rxjava")

    compile("javax.xml.bind:jaxb-api")
    compile("org.modelmapper:modelmapper:2.1.0")
    
    // front dependencies 
    compile("de.neuland-bfi:spring-jade4j:1.2.5")
    compile("com.github.instaweb:spring-boot-jade:0.9.0-SNAPSHOT")
    compile("org.freemarker:freemarker")
    compile("javax.servlet:jstl")
    compile("org.webjars:bootstrap:3.3.7")
    compile("org.webjars:stomp-websocket:2.3.3")
    compile("org.webjars:webjars-locator-core")
    compile("org.webjars:sockjs-client:1.0.2")
    compile("org.webjars:jquery:3.1.0")
	compile("com.lambdaworks:scrypt:1.4.0")
    compile("com.github.jnr:jnr-ffi:2.1.0")
    
     
    //compile "org.scala-lang:scala-library:2.11.3"
    //compile "org.scala-lang:scala-reflect:2.11.3"
    //compile "org.scala-lang:scala-compiler:2.11.3"

    //compile 'org.apache.spark:spark-mllib_2.11:2.3.2'
    
    //compile 'org.apache.spark:spark-streaming-flume-assembly_2.11:2.3.2'
    //compile 'org.apache.spark:spark-graphx_2.11:2.3.2'
    //compile 'org.apache.spark:spark-launcher_2.11:2.3.2'
    //compile 'org.apache.spark:spark-catalyst_2.11:2.3.2'
    //compile 'org.apache.spark:spark-streaming_2.11:2.3.2'
    compile ('org.apache.spark:spark-core_2.11:2.4.0') {
        //exclude module: 'org.slf4j:slf4j-log4j12'
       // exclude module: 'log4j:log4j'

    }
    //compile 'org.apache.spark:spark-sql_2.11:2.1.0'
    
	// https://mvnrepository.com/artifact/org.apache.spark/spark-core
	//compile group: 'org.apache.spark', name: 'spark-core_2.11', version: '2.3.2'
    provided group: 'org.apache.spark', name: 'spark-streaming_2.11', version: '2.4.0'
    compile group: 'org.apache.spark', name: 'spark-sql_2.11', version: '2.4.0'
    
    //compile 'org.springframework.kafka:spring-kafka'
    //compile group: 'batik', name: 'batik-svg-dom', version: '1.6-1' // for the

    // SYSTEM path
    //compile("org.abstractj.kalium:kalium:kalium-0.5.0_blavenie") 
  	compile files('lib/kalium-0.5.0_blavenie.jar') //, 'libs/gson-2.2.4.jar')
    

    // TESTS
    testCompile("junit:junit")
    testCompile("com.h2database:h2")
    testCompile("org.apache.httpcomponents:httpclient")
    testCompile("org.springframework.boot:spring-boot-starter-test")

    compile 'org.projectlombok:lombok:1.18.4'

    //compile files("$sourceSets.main.scala.outputDir")

    antlr "org.antlr:antlr4:4.7.1"
    //compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    compile 'org.springframework.boot:spring-boot-starter-actuator'
    compile 'io.micrometer:micrometer-core'
    compile 'io.micrometer:micrometer-registry-prometheus'

    //compile 'de.codecentric:spring-boot-admin-starter-server:2.1.1'
    compile 'de.codecentric:spring-boot-admin-starter-client:2.1.1'
    compile 'org.springframework.boot:spring-boot-starter-security'

    compile 'com.ryantenney.metrics:metrics-spring:3.1.3'

    compile "org.xerial:sqlite-jdbc:3.23.1"
}



test {      // more infos : https://moelholm.com/2016/10/22/spring-boot-separating-tests/
	useJUnit {
        exclude '**/*IntegrationTests.class'
        exclude '**/*ITest.class'
    }
    
    jvmArgs '-Xdebug',
            '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=10999'
    
}

task integrationTest(type: Test) {
    useJUnit {
        include '**/*IntegrationTests.class'
        include '**/*ITest.class'
    }
}


sourceSets {

    main { 
    	// add provided configuration
    	compileClasspath += configurations.provided 

    	// add the generated source files to the list of java sources
    	//java.srcDirs += 'build/generated-src/'

        //scala { outputDir = file("$buildDir/classes/scala/main") }
        java {
            outputDir = file("$buildDir/classes/java/main")
        }
    }



}


generateGrammarSource {
 	arguments << "-visitor" << "-lib" << "src/main/antlr" 
    outputDirectory = new File("src/main/java/antlr/main".toString())

    maxHeapSize = "64m"
    

    // Keep a copy of generated sources
    //doLast {
    //    println "Copying generated grammar lexer/parser files to main directory."
    //    copy {
    //        from "${buildDir}/generated-src/antlr/main"
    //        into "src/main/java/antlr/main"
    //    }
    //}
}



version = '10'

description = """\
Simple Gradle project to show how we can
use the description property of a project.
------------------------------------------
Project version: ${version}
Gradle version: ${gradle.gradleVersion}
------------------------------------------
"""

jar {
     manifest {
        attributes 'Implementation-Title': 'Juniter',
                   'Implementation-Version': version
    }
}



clean.doLast {
    file('generated-src').deleteDir()
}

//compileKotlin {
//    kotlinOptions {
//        jvmTarget = "1.8"
//    }
//}
//compileTestKotlin {
//    kotlinOptions {
//        jvmTarget = "1.8"
//    }
//}
