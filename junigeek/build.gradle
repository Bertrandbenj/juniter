buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url 'http://repo.spring.io/plugins-release' }
        jcenter()
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.0.2.RELEASE")
        classpath 'org.hidetake:gradle-ssh-plugin:2.9.0'
        classpath('se.transmode.gradle:gradle-docker:1.2')
        classpath "com.netflix.nebula:gradle-ospackage-plugin:6.2.1"

        // classpath("com.github.honourednihilist:gradle-postgresql-embedded:0.4.0")
    }

}

//plugins {
//    id 'com.bmuschko.docker-spring-boot-application' version '4.4.1'
//    id "com.github.honourednihilist.gradle-postgresql-embedded" version "0.4.0"
//}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
//apply plugin: 'com.github.honourednihilist.gradle-postgresql-embedded'
apply plugin: 'application'
//apply plugin: 'docker-spring-boot-application'
apply plugin: "nebula.ospackage"
apply plugin: 'docker'


dependencies {
    compile project(":core")
    testCompile group: 'junit', name: 'junit', version: '4.12'

    runtime('org.springframework.boot:spring-boot-devtools')
    //postgresql
    runtime('org.postgresql:postgresql')
}


//task buildAll(type: GradleBuild) {
//    tasks = [ 'build' ]
//}
 
bootJar {
    mainClassName = 'juniter.Application'
    enabled = true

    baseName = "${project.name}"
    version = "${project.version}-boot"

    manifest.attributes(
            'Multi-Release': 'true'
    )
}


jar {
    baseName = "junigeek"
    //group    = "juniter"
    version = "${project.version}"
    mainClassName = 'juniter.Application'

    enabled = true
    manifest {
        attributes(
                'Main-Class': 'juniter.Application'
        )
    }
}

docker {
    //baseImage "frolvlad/alpine-openjdk11:stretch"
    baseImage "adoptopenjdk/openjdk-11:alpine-slim"
    maintainer 'BnimajneB "bnimajneb@duniter.org"'
}

task nginxDocker(type: Docker) {
    applicationName = "nginx"
    runCommand 'echo "deb http://archive.ubuntu.com/ubuntu precise main universe" > /etc/apt/sources.list'
    runCommand "apt-get update"
    runCommand "apt-get install -y inotify-tools nginx apache2 openssh-server"
}


bootRun {
    enableAssertions = true // !!  BR_G[0-108] assertion
    //jvmArgs = ["-agentlib:jdwp=transport=dt_socket,server=y,address=5005,suspend=y"]
}

//postgresEmbedded {
//    version = "V10"
//    host = "localhost"
//    port = 0 // zero value means a random port
//    dbName = "embedded"
//    username = "testuser"
//    password = "junipass"
//    artifactStorePath = "~/.embedpostgresql" // where PostgreSQL distributions are stored after downloading, inside home directory by default
//    stopWhenBuildFinished = true
//    timeoutMillisBeforeStop = 0
//}


// ===================================================================================
// =                                  .deb    .rpm                                   =
// ===================================================================================


buildDeb {

//    user "juniter"
//    permissionGroup "juniter"

    requires('graphviz', '2.40.1', GREATER | EQUAL)
    requires('postgresql')
    requires('libsodium-dev', '1.0.16', GREATER | EQUAL)
    requires('openjdk-11-jdk', '11.0.3', GREATER | EQUAL)

    link('/lib/systemd/system/juniter.service', "/opt/${project.name}/bin/service/juniter.service")
    link('/lib/systemd/system/ipfs-cluster.service', "/opt/${project.name}/bin/service/ipfs-custer.service")
    link('/lib/systemd/system/ipfs.service', "/opt/${project.name}/bin/service/ipfs.service")
    link('/usr/local/bin/junigeek', "/opt/${project.name}/bin/junigeek.sh")

}


ospackage {
    packageName = "${project.name}"
    version = "${project.version}"
//    release = 'beta'
    type = BINARY
//  arch = I386
    os = LINUX

    installUtils file('../scripts/rpm/utils.sh')
    preInstall file('../scripts/rpm/preInstall.sh')
    postInstall file('../scripts/rpm/postInstall.sh')
//  preUninstall 'touch /tmp/myfile'java -Dfile.encoding=UTF-8 -cp "/opt/juniterriens/lib/*" juniter.GUIApplication

    postUninstall file('../scripts/rpm/postUninstall.sh')

    //requires('qux')

    into "/opt/${project.name}"
//    user "juniter"
//    permissionGroup "juniter"


    from(jar.outputs.files) {
        into 'lib'
    }
    from(configurations.runtime) {
        into 'lib'
    }

    from('lib') {
        into 'lib'
    }
    from('../scripts') {
        into 'bin'
        exclude 'database'
        fileMode = 0550
    }

    from('src/main/resources') {
        fileType CONFIG | NOREPLACE
        into 'conf'
    }

    from('home') {
        // Creating directory entries (or not) in the RPM is normally left up to redline-rpm library.
        // Use this to explicitly create an entry -- for setting directory fileMode on system directories.
        createDirectoryEntry = true
        fileMode = 0500
        into 'home'
    }
    from('endorsed') {
        // Will tell redline-rpm not to auto create directories, which
        // is sometimes necessary to avoid rpm directory conflicts
        addParentDirs = false
        into '/usr/share/tomcat/endorsed'
    }

//    from ( "${project.buildDir}/libs" ){
//        into 'lib'
//    }

}


//
// ==================== servers =======================
//

//https://gradle-ssh-plugin.github.io/docs/
remotes {
    juniter {
        role 'masterNode'
        host = '151.80.147.129'
        user = 'ben'
        agent = true    // If this is set, Putty Agent or ssh-agent will be used on authentication
        identity = file("${System.getProperty('user.home')}/.ssh/id_rsa")
    }
}

task deploy {
    //dependsOn jar, bootJar
    doLast {
        ssh.run {
            session(remotes.juniter) {
                //execute 'killall java'

                jarFile = "junigeek-${project.version}-boot.jar"

                println jar
                //put from: "${project.projectDir}/build/libs/junigeek-${project.version}.jar", into: '/home/ben'
                put from: "${project.projectDir}/" + jarFile, into: '/home/ben'

                //execute 'sudo service tomcat restart'
                execute "java -jar " + jarFile + " --headless "
            }
        }
    }
}

task checkServer {
    doLast {
        ssh.run {
            session(remotes.juniter) {

                def result = execute 'ls -al' // Execute a command for fun

                // Any Gradle methods or properties are available in a session closure "$buildDir/tmp"
                copy {
                    from "docs/"
                    into "/tmp"
                }

                // Also Groovy methods or properties are available in a session closure
                println result
            }
        }
    }
}


